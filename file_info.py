import hashlib
from hachoir.parser import createParser
from hachoir.metadata import extractMetadata
from hachoir import core
import os

core.config.quiet = True  # Suppress hachoir warnings


def get_file_metadata(file_path):
    parser = createParser(file_path)
    if not parser:
        raise ValueError("Unable to parse file")
    
    metadata = extractMetadata(parser)
    if not metadata:
        raise ValueError("Unable to extract metadata")
    
    metadata_dict = {}
    for item in metadata.exportPlaintext():
        if ": " in item:
            key, value = item.split(": ", 1)
            metadata_dict[key.strip()] = value.strip()
    
    return metadata_dict

def calculate_hashes(file_path):
    hash_algorithms = ['md5', 'sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'blake2b']
    hashes = {}
    for algo in hash_algorithms:
        hasher = hashlib.new(algo)
        with open(file_path, 'rb') as f:
            for chunk in iter(lambda: f.read(8192), b""):  # Using iter to read chunks
                hasher.update(chunk)
        hashes[algo] = hasher.hexdigest()
    return hashes


def get_file_info(file_path):
    if not os.path.exists(file_path):
        raise FileNotFoundError(f"File not found: {file_path}")

    file_info = {
        "metadata": get_file_metadata(file_path),
        "hashes": calculate_hashes(file_path),
    }

    return file_info
