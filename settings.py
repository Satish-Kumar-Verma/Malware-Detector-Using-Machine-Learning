import sys
import os
from PyQt5.QtWidgets import (
    QWidget, QVBoxLayout, QLabel, QCheckBox, QComboBox, QPushButton,
    QSpinBox, QApplication, QMessageBox, QHBoxLayout, QGroupBox, QFormLayout,
    QFileDialog, QLineEdit, QSizePolicy
)
from PyQt5.QtGui import QFont, QIcon
from PyQt5.QtCore import Qt
from config import load_config, save_config, import_config

class SettingsWidget(QWidget):
    def __init__(self, main_window=None):
        super().__init__(main_window)
        self.config = load_config()
        self.init_ui()


    def init_ui(self):
        layout = QVBoxLayout()
        layout.setContentsMargins(20, 20, 20, 20)  # Adjust margins to prevent titles from being cut off
        layout.setSpacing(20)

        # Title Label
        title_label = QLabel("Settings")
        title_label.setFont(QFont('Segoe UI', 32, QFont.Bold))
        title_label.setAlignment(Qt.AlignCenter)
        layout.addWidget(title_label)

        # Custom style for QGroupBox to adjust padding and margins
        groupbox_style = """
        QGroupBox {
            margin-top: 20px;
            padding-top: 10px; /* Increase padding at the top to make room for the title */
            font-size: 16px; /* Adjust font size as needed */
        }
        QGroupBox::title {
            subcontrol-origin: margin;
            subcontrol-position: top left;
            padding: 0 5px;
            margin-top: -10px; /* Move the title upwards to overlap the border */
        }
        """

        # General Settings
        general_group = QGroupBox("General Settings")
        general_group.setStyleSheet(groupbox_style)
        general_layout = QFormLayout()
        general_layout.setSpacing(10)

        self.real_time_protection = QCheckBox("Enable Real-time Protection")
        self.real_time_protection.setChecked(self.config["general"]["real_time_protection"])
        general_layout.addRow(self.real_time_protection)

        self.scheduled_scan_frequency = QComboBox()
        self.scheduled_scan_frequency.addItems(["Daily", "Weekly", "Monthly"])
        self.scheduled_scan_frequency.setCurrentText(self.config["general"]["scheduled_scan"]["frequency"])
        general_layout.addRow(QLabel("Scheduled Scan Frequency:"), self.scheduled_scan_frequency)

        self.scheduled_scan_time = QSpinBox()
        self.scheduled_scan_time.setRange(0, 23)
        self.scheduled_scan_time.setSuffix(":00")
        self.scheduled_scan_time.setValue(int(self.config["general"]["scheduled_scan"]["time"].split(":")[0]))
        general_layout.addRow(QLabel("Scheduled Scan Time:"), self.scheduled_scan_time)

        self.theme = QComboBox()
        self.theme.addItems(["Light", "Cyber"])
        self.theme.setCurrentText(self.config["general"]["theme"])
        general_layout.addRow(QLabel("Theme:"), self.theme)

        general_group.setLayout(general_layout)
        layout.addWidget(general_group)

        # Scan Settings
        scan_group = QGroupBox("Scan Settings")
        scan_group.setStyleSheet(groupbox_style)
        scan_layout = QFormLayout()
        scan_layout.setSpacing(10)

        self.default_scan_type = QComboBox()
        self.default_scan_type.addItems(["Quick", "Full"])
        self.default_scan_type.setCurrentText(self.config["scan"]["default_scan_type"])
        scan_layout.addRow(QLabel("Default Scan Type:"), self.default_scan_type)

        self.sensitivity = QComboBox()
        self.sensitivity.addItems(["Low", "Normal", "High"])
        self.sensitivity.setCurrentText(self.config["scan"]["sensitivity"])
        scan_layout.addRow(QLabel("Scan Sensitivity:"), self.sensitivity)

        scan_group.setLayout(scan_layout)
        layout.addWidget(scan_group)

        # Update Settings
        update_group = QGroupBox("Update Settings")
        update_group.setStyleSheet(groupbox_style)
        update_layout = QFormLayout()
        update_layout.setSpacing(10)

        self.auto_update = QCheckBox("Enable Automatic Updates")
        self.auto_update.setChecked(self.config["update"]["auto_update"])
        update_layout.addRow(self.auto_update)

        update_group.setLayout(update_layout)
        layout.addWidget(update_group)

        # Notification Settings
        notification_group = QGroupBox("Notification Settings")
        notification_group.setStyleSheet(groupbox_style)
        notification_layout = QFormLayout()
        notification_layout.setSpacing(10)

        self.notifications_enabled = QCheckBox("Enable Notifications")
        self.notifications_enabled.setChecked(self.config["notifications"]["enabled"])
        notification_layout.addRow(self.notifications_enabled)

        self.sound_notifications = QCheckBox("Enable Sound Notifications")
        self.sound_notifications.setChecked(self.config["notifications"]["sound"])
        notification_layout.addRow(self.sound_notifications)

        notification_group.setLayout(notification_layout)
        layout.addWidget(notification_group)

        # Import / Export Settings
        import_export_group = QGroupBox("Import / Export Settings")
        import_export_group.setStyleSheet(groupbox_style)
        import_export_layout = QVBoxLayout()
        import_export_layout.setSpacing(10)

        # Import Settings
        import_layout = QHBoxLayout()
        import_label = QLabel("Import Settings:")
        import_button = QPushButton("Import Settings")
        import_button.clicked.connect(self.import_settings)

        import_layout.addWidget(import_label)
        import_layout.addWidget(import_button)
        import_layout.addStretch()
        import_export_layout.addLayout(import_layout)

        # Export Settings
        export_layout = QHBoxLayout()
        export_label = QLabel("Default Export Path:")
        self.config_location = QLineEdit()
        self.config_location.setText(self.config.get("config_file_location", ''))
        self.config_location.setReadOnly(True)
        self.config_location.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)

        change_location_button = QPushButton(QIcon(resource_path('resources/dir_icon.png')), "")
        change_location_button.setFixedWidth(30)
        change_location_button.setStyleSheet("background: transparent; border: none;")
        change_location_button.clicked.connect(self.browse_config_file)

        export_layout.addWidget(export_label)
        export_layout.addWidget(self.config_location)
        export_layout.addWidget(change_location_button)
        export_layout.addStretch()
        import_export_layout.addLayout(export_layout)

        import_export_group.setLayout(import_export_layout)
        layout.addWidget(import_export_group)

        # Save Button
        save_button = QPushButton("Save Settings")
        save_button.clicked.connect(self.save_settings)
        save_button.setFont(QFont('Segoe UI', 14))
        save_button.setFixedHeight(40)
        save_button.setSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed)

        button_layout = QHBoxLayout()
        button_layout.addStretch()
        button_layout.addWidget(save_button)
        button_layout.addStretch()

        layout.addLayout(button_layout)

        self.setLayout(layout)

    def browse_config_file(self):
        file_dialog = QFileDialog.getSaveFileName(self, 'Select Config File', '', 'JSON Files (*.json)')
        if file_dialog[0]:
            self.config_location.setText(file_dialog[0])

    def save_settings(self):
        self.config["general"]["real_time_protection"] = self.real_time_protection.isChecked()
        self.config["general"]["scheduled_scan"]["frequency"] = self.scheduled_scan_frequency.currentText()
        self.config["general"]["scheduled_scan"]["time"] = f"{self.scheduled_scan_time.value()}:00"
        self.config["general"]["theme"] = self.theme.currentText()
        self.config["scan"]["default_scan_type"] = self.default_scan_type.currentText()
        self.config["scan"]["sensitivity"] = self.sensitivity.currentText()
        self.config["update"]["auto_update"] = self.auto_update.isChecked()
        self.config["notifications"]["enabled"] = self.notifications_enabled.isChecked()
        self.config["notifications"]["sound"] = self.sound_notifications.isChecked()
        self.config["config_file_location"] = self.config_location.text()

        try:
            save_config(self.config, self.config_location.text())
            QMessageBox.information(self, "Settings Saved", "Settings have been saved successfully!")
        except Exception as e:
            QMessageBox.critical(self, "Save Error", f"An error occurred while saving settings: {e}")

    def import_settings(self):
        file_dialog = QFileDialog.getOpenFileName(self, 'Import Settings', '', 'JSON Files (*.json)')
        if file_dialog[0]:
            try:
                self.config = import_config(file_dialog[0])
                self.update_ui_from_config()
                QMessageBox.information(self, "Settings Imported", "Settings have been imported successfully!")
            except Exception as e:
                QMessageBox.critical(self, "Import Error", f"An error occurred while importing settings: {e}")

    def export_settings(self):
        self.config["config_file_location"] = self.config_location.text()
        try:
            save_config(self.config, self.config_location.text())
            QMessageBox.information(self, "Settings Exported", f"Settings have been exported successfully to this location : {self.config_location.text()}!")
        except Exception as e:
            QMessageBox.critical(self, "Export Error", f"An error occurred while exporting settings: {e}")

    def update_ui_from_config(self):
        self.real_time_protection.setChecked(self.config["general"]["real_time_protection"])
        self.scheduled_scan_frequency.setCurrentText(self.config["general"]["scheduled_scan"]["frequency"])
        self.scheduled_scan_time.setValue(int(self.config["general"]["scheduled_scan"]["time"].split(":")[0]))
        self.theme.setCurrentText(self.config["general"]["theme"])
        self.default_scan_type.setCurrentText(self.config["scan"]["default_scan_type"])
        self.sensitivity.setCurrentText(self.config["scan"]["sensitivity"])
        self.auto_update.setChecked(self.config["update"]["auto_update"])
        self.notifications_enabled.setChecked(self.config["notifications"]["enabled"])
        self.sound_notifications.setChecked(self.config["notifications"]["sound"])
        self.config_location.setText(self.config["config_file_location"])

def resource_path(relative_path):
    """ Get the absolute path to the resource, works for dev and for PyInstaller """
    try:
        base_path = sys._MEIPASS
    except Exception:
        base_path = os.path.abspath(".")

    return os.path.join(base_path, relative_path)

if __name__ == "__main__":
    app = QApplication(sys.argv)
    settings_widget = SettingsWidget()
    settings_widget.show()
    sys.exit(app.exec_())
