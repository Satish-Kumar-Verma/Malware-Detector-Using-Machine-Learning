import sys
from PyQt5.QtWidgets import QWidget, QVBoxLayout, QPushButton, QFileDialog, QTableWidget, QTableWidgetItem, QApplication, QHeaderView, QLabel, QProgressBar
from PyQt5.QtGui import QFont, QIcon
from PyQt5.QtCore import Qt, QThread, pyqtSignal
from pe_analyzer import analyze_pe
from settings import resource_path

class PEAnalyzerThread(QThread):
    progress = pyqtSignal(int, str)
    result = pyqtSignal(dict)

    def __init__(self, file_path):
        super().__init__()
        self.file_path = file_path

    def run(self):
        pe_info = analyze_pe(self.file_path, self.progress)
        self.result.emit(pe_info)

class PEAnalyzerWidget(QWidget):
    def __init__(self):
        super().__init__()
        self.init_ui()

    def init_ui(self):
        layout = QVBoxLayout()

        title_label = QLabel("PE Analyzer")
        title_label.setFont(QFont('Arial', 100))
        title_label.setStyleSheet("color: #29b6f6; margin-bottom: 20px;")
        layout.addWidget(title_label, alignment=Qt.AlignCenter)

        self.load_button = QPushButton("Load PE File")
        self.load_button.clicked.connect(self.load_pe_file)
        self.load_button.setFont(QFont('Arial', 14))
        self.load_button.setStyleSheet("""
            QPushButton {
                color: white;                
            }
        """)


        layout.addWidget(self.load_button, alignment=Qt.AlignCenter)

        self.progress_bar = QProgressBar()
        self.progress_bar.setValue(0)
        self.progress_bar.setVisible(False)
        layout.addWidget(self.progress_bar)

        self.status_label = QLabel("")
        self.status_label.setAlignment(Qt.AlignCenter)
        self.status_label.setVisible(False)
        layout.addWidget(self.status_label)

        self.table_widget = QTableWidget()
        layout.addWidget(self.table_widget)

        self.setLayout(layout)

    def load_pe_file(self):
        file_dialog = QFileDialog.getOpenFileName(self, 'Open PE File', '', 'PE Files (*.exe *.dll)')
        if file_dialog[0]:
            self.progress_bar.setVisible(True)
            self.status_label.setVisible(True)
            self.progress_bar.setValue(0)
            self.status_label.setText("Starting analysis...")

            self.thread = PEAnalyzerThread(file_dialog[0])
            self.thread.progress.connect(self.update_progress)
            self.thread.result.connect(self.display_pe_info)
            self.thread.start()

    def update_progress(self, value, message):
        self.progress_bar.setValue(value)
        self.status_label.setText(message)

    def display_pe_info(self, pe_info):
        self.progress_bar.setVisible(False)
        self.status_label.setVisible(False)

        self.table_widget.clear()
        self.table_widget.setRowCount(0)
        self.table_widget.setColumnCount(2)
        self.table_widget.setHorizontalHeaderLabels(['Field', 'Value'])
        self.table_widget.horizontalHeader().setStretchLastSection(True)
        self.table_widget.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.table_widget.setStyleSheet("""
            QTableWidget {
                font-size: 12pt;
            }
            QHeaderView::section {
                font-size: 14pt;
            }
            
        """)
        self.table_widget.setAlternatingRowColors(True)

        def add_row(field, value):
            row_position = self.table_widget.rowCount()
            self.table_widget.insertRow(row_position)
            self.table_widget.setItem(row_position, 0, QTableWidgetItem(field))
            self.table_widget.setItem(row_position, 1, QTableWidgetItem(value))

        def add_header(title):
            row_position = self.table_widget.rowCount()
            self.table_widget.insertRow(row_position)
            item = QTableWidgetItem(title)
            item.setTextAlignment(Qt.AlignCenter)
            item.setFont(QFont('Arial', 14, QFont.Bold))
            self.table_widget.setSpan(row_position, 0, 1, 2)
            self.table_widget.setItem(row_position, 0, item)

        # DOS Header
        add_header("DOS Header")
        for key, value in pe_info["dos_header"].items():
            add_row(f"  {key}", str(value))

        # PE Header
        add_header("PE Header")
        for key, value in pe_info["pe_header"].items():
            add_row(f"  {key}", str(value))

        # Optional Header
        add_header("Optional Header")
        for key, value in pe_info["optional_header"].items():
            add_row(f"  {key}", str(value))

        # Sections
        add_header("Sections")
        for section in pe_info["sections"]:
            add_row(f"  Section Name", section["name"])
            for key, value in section.items():
                if key != "name":
                    add_row(f"    {key}", str(value))

        # Imports
        add_header("Imports")
        for imp in pe_info["imports"]:
            add_row(f"  DLL", imp["dll"])
            for func in imp["functions"]:
                add_row(f"    {func['name']}", func['address'])

        # Exports
        add_header("Exports")
        for exp in pe_info["exports"]:
            add_row(f"  Function Name", exp["name"])
            add_row(f"    Address", exp["address"])

        # Resources
        add_header("Resources")
        for res in pe_info["resources"]:
            add_row(f"  Resource Type", str(res["type"]))

        # Debug
        add_header("Debug Information")
        for dbg in pe_info["debug"]:
            add_row(f"  Debug Type", str(dbg["type"]))
            add_row(f"    Size", str(dbg["size"]))

        # Compilation Info
        add_header("Compilation Info")
        for key, value in pe_info["compilation_info"].items():
            add_row(f"  {key}", str(value))

if __name__ == "__main__":
    app = QApplication(sys.argv)
    viewer = PEAnalyzerWidget()
    viewer.show()
    sys.exit(app.exec_())
