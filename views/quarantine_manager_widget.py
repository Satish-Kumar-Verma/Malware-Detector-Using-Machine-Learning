import sys
from PyQt5.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QTableWidget, QTableWidgetItem, QPushButton, 
    QMessageBox, QApplication, QInputDialog, QHeaderView

)
from PyQt5.QtGui import QFont, QColor
from PyQt5.QtCore import Qt
from quarantine_manager import load_quarantine_data, restore_file, delete_file, add_note_to_file

class QuarantineManagerWidget(QWidget):
    def __init__(self):
        super().__init__()
        self.init_ui()

    def init_ui(self):
        layout = QVBoxLayout()

        # Quarantine Files Table
        self.table_widget = QTableWidget()
        self.table_widget.setColumnCount(5)
        self.table_widget.setHorizontalHeaderLabels(['File Name', 'Original Path', 'Date Quarantined', 'Reason', 'Notes'])
        self.table_widget.horizontalHeader().setStretchLastSection(True)
        self.table_widget.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.table_widget.setStyleSheet("""
            QTableWidget {
                font-size: 12pt;
            }
            QHeaderView::section {
                font-size: 14pt;
            }
        """)
        self.table_widget.setAlternatingRowColors(True)
        layout.addWidget(self.table_widget)
        self.load_quarantined_files()

        # Buttons Layout
        button_layout = QHBoxLayout()

        # Restore Button
        restore_button = QPushButton("Restore")
        restore_button.setFont(QFont('Arial', 12))
        restore_button.setStyleSheet(self.button_style())
        restore_button.clicked.connect(self.restore_selected_file)
        button_layout.addWidget(restore_button)

        # Delete Button
        delete_button = QPushButton("Delete")
        delete_button.setFont(QFont('Arial', 12))
        delete_button.setStyleSheet(self.button_style(delete=True))
        delete_button.clicked.connect(self.delete_selected_file)
        button_layout.addWidget(delete_button)

        # Add Note Button
        add_note_button = QPushButton("Add Note")
        add_note_button.setFont(QFont('Arial', 12))
        add_note_button.setStyleSheet(self.button_style(note=True))
        add_note_button.clicked.connect(self.add_note_to_selected_file)
        button_layout.addWidget(add_note_button)

        layout.addLayout(button_layout)
        self.setLayout(layout)

    def load_quarantined_files(self):
        self.table_widget.setRowCount(0)
        data = load_quarantine_data()
        for file_info in data:
            row_position = self.table_widget.rowCount()
            self.table_widget.insertRow(row_position)
            self.table_widget.setItem(row_position, 0, QTableWidgetItem(file_info['file_name']))
            self.table_widget.setItem(row_position, 1, QTableWidgetItem(file_info['original_path']))
            self.table_widget.setItem(row_position, 2, QTableWidgetItem(file_info['date_quarantined']))
            self.table_widget.setItem(row_position, 3, QTableWidgetItem(file_info['reason']))
            notes_item = QTableWidgetItem(file_info['notes'])
            notes_item.setForeground(QColor(Qt.blue))
            self.table_widget.setItem(row_position, 4, notes_item)

    def get_selected_file(self):
        selected_row = self.table_widget.currentRow()
        if selected_row == -1:
            QMessageBox.warning(self, 'No Selection', 'Please select a file from the list.')
            return None
        file_name = self.table_widget.item(selected_row, 0).text()
        return file_name

    def restore_selected_file(self):
        file_name = self.get_selected_file()
        if file_name and restore_file(file_name):
            QMessageBox.information(self, 'File Restored', f'File {file_name} has been restored.')
            self.load_quarantined_files()
        else:
            QMessageBox.warning(self, 'Error', 'Failed to restore file.')

    def delete_selected_file(self):
        file_name = self.get_selected_file()
        if file_name and delete_file(file_name):
            QMessageBox.information(self, 'File Deleted', f'File {file_name} has been deleted.')
            self.load_quarantined_files()
        else:
            QMessageBox.warning(self, 'Error', 'Failed to delete file.')

    def add_note_to_selected_file(self):
        file_name = self.get_selected_file()
        if file_name:
            note, ok = QInputDialog.getText(self, 'Add Note', 'Enter note for the file:')
            if ok and note:
                if add_note_to_file(file_name, note):
                    QMessageBox.information(self, 'Note Added', f'Note added to file {file_name}.')
                    self.load_quarantined_files()
                else:
                    QMessageBox.warning(self, 'Error', 'Failed to add note to file.')

    def button_style(self, delete=False, note=False):
        if delete:
            return """
                QPushButton {
                    background-color: #f44336;
                    color: white;
                    border-radius: 10px;
                    padding: 10px;
                    margin: 10px;
                    width: 100px;
                }
                QPushButton:hover {
                    background-color: #e53935;
                }
            """
        elif note:
            return """
                QPushButton {
                    background-color: #2196F3;
                    color: white;
                    border-radius: 10px;
                    padding: 10px;
                    margin: 10px;
                    width: 100px;
                }
                QPushButton:hover {
                    background-color: #1976D2;
                }
            """
        else:
            return """
                QPushButton {
                    background-color: #4CAF50;
                    color: white;
                    border-radius: 10px;
                    padding: 10px;
                    margin: 10px;
                    width: 100px;
                }
                QPushButton:hover {
                    background-color: #45a049;
                }
            """

if __name__ == "__main__":
    app = QApplication(sys.argv)
    quarantine_manager = QuarantineManagerWidget()
    quarantine_manager.show()
    sys.exit(app.exec_())
