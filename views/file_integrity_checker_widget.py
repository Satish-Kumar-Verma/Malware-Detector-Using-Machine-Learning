import sys
from PyQt5.QtWidgets import QWidget, QVBoxLayout, QHBoxLayout, QPushButton, QFileDialog, QTableWidget, QTableWidgetItem, QMessageBox, QLineEdit, QLabel, QApplication, QHeaderView
from file_integrity_checker import verify_file

class FileIntegrityCheckerWidget(QWidget):
    def __init__(self):
        super().__init__()
        self.file_path = None
        self.init_ui()

    def init_ui(self):
        layout = QVBoxLayout()

        # Verify File Integrity with Provided Hash
        verify_file_label = QLabel("Upload a file and enter the hash value to verify its integrity:")
        verify_file_label.setStyleSheet("font-size: 14pt; margin: 10px;")
        layout.addWidget(verify_file_label)

        # File Upload Layout
        file_upload_layout = QHBoxLayout()
        choose_file_button = QPushButton("Choose File")
        choose_file_button.setStyleSheet("""
            QPushButton {
                background-color: #ff9800;
                color: white;
                border-radius: 10px;
                padding: 10px;
                font-size: 12pt;
                min-width: 120px;
            }
            QPushButton:hover {
                background-color: #fb8c00;
            }
        """)
        choose_file_button.clicked.connect(self.upload_file)
        file_upload_layout.addWidget(choose_file_button)

        self.file_name_label = QLabel("No file uploaded")
        self.file_name_label.setStyleSheet("font-size: 12pt; margin-left: 10px;")
        file_upload_layout.addWidget(self.file_name_label)

        layout.addLayout(file_upload_layout)

        # Hash Input and Verify Button Layout
        hash_verify_layout = QHBoxLayout()
        self.hash_input = QLineEdit()
        self.hash_input.setPlaceholderText("Enter the hash value here")
        self.hash_input.setStyleSheet("padding: 10px; font-size: 12pt;")
        hash_verify_layout.addWidget(self.hash_input)

        verify_button = QPushButton("Verify Integrity")
        verify_button.setStyleSheet("""
            QPushButton {
                background-color: #2196F3;
                color: white;
                border-radius: 10px;
                padding: 10px 20px;
                font-size: 12pt;
            }
            QPushButton:hover {
                background-color: #1976D2;
            }
        """)
        verify_button.clicked.connect(self.verify_integrity)
        hash_verify_layout.addWidget(verify_button)
        
        layout.addLayout(hash_verify_layout)

        # File Integrity Status Table
        self.table_widget = QTableWidget()
        self.table_widget.setColumnCount(2)
        self.table_widget.setHorizontalHeaderLabels(['File Path', 'Status'])
        self.table_widget.horizontalHeader().setStretchLastSection(False)
        self.table_widget.horizontalHeader().setSectionResizeMode(0, QHeaderView.Stretch)
        self.table_widget.horizontalHeader().setSectionResizeMode(1, QHeaderView.Stretch)
        self.table_widget.horizontalHeader().setSectionResizeMode(0, QHeaderView.Stretch)
        self.table_widget.horizontalHeader().setSectionResizeMode(1, QHeaderView.ResizeToContents)
        self.table_widget.horizontalHeader().setSectionResizeMode(QHeaderView.Interactive)
        self.table_widget.horizontalHeader().setSectionResizeMode(QHeaderView.Interactive)
        self.table_widget.horizontalHeader().setStretchLastSection(False)
        self.table_widget.horizontalHeader().setSectionResizeMode(0, QHeaderView.Stretch)
        self.table_widget.horizontalHeader().setSectionResizeMode(1, QHeaderView.Stretch)
        self.table_widget.setColumnWidth(1, 150)
        self.table_widget.setStyleSheet("""
            QTableWidget {
                font-size: 12pt;
            }
            QHeaderView::section {
                font-size: 14pt;
            }
        """)
        self.table_widget.setAlternatingRowColors(True)
        layout.addWidget(self.table_widget)

        self.setLayout(layout)

    def upload_file(self):
        file_dialog = QFileDialog.getOpenFileName(self, 'Select File to Verify', '', 'All Files (*)')
        if file_dialog[0]:
            self.file_path = file_dialog[0]
            self.file_name_label.setText(self.file_path.split('/')[-1])
            QMessageBox.information(self, 'File Uploaded', f'File {self.file_path} uploaded successfully.')

    def verify_integrity(self):
        if not self.file_path:
            QMessageBox.warning(self, 'No File Uploaded', 'Please upload a file to verify.')
            return
        provided_hash = self.hash_input.text()
        if not provided_hash:
            QMessageBox.warning(self, 'No Hash Provided', 'Please enter a hash value to verify against.')
            return
        is_intact = verify_file(self.file_path, provided_hash)
        row_position = self.table_widget.rowCount()
        self.table_widget.insertRow(row_position)
        self.table_widget.setItem(row_position, 0, QTableWidgetItem(self.file_path))
        status = "Intact" if is_intact else "Changed"
        self.table_widget.setItem(row_position, 1, QTableWidgetItem(status))
        if is_intact:
            QMessageBox.information(self, 'Verification Result', 'The file is intact and matches the provided hash.')
        else:
            QMessageBox.warning(self, 'Verification Result', 'The file does not match the provided hash or has been changed.')

if __name__ == "__main__":
    app = QApplication(sys.argv)
    file_integrity_checker = FileIntegrityCheckerWidget()
    file_integrity_checker.show()
    sys.exit(app.exec_())
