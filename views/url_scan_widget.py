import sys
from PyQt5.QtWidgets import QWidget, QVBoxLayout, QPushButton, QLineEdit, QLabel, QApplication, QMessageBox, QHBoxLayout, QTableWidget, QTableWidgetItem, QHeaderView
from PyQt5.QtGui import QFont, QIcon
from PyQt5.QtCore import Qt
from url_scan import predict_url

class URLScanWidget(QWidget):
    def __init__(self):
        super().__init__()
        self.init_ui()
        self.scan_history = []

    def init_ui(self):
        self.layout = QVBoxLayout()

        title_label = QLabel("Malicious URL Detector")
        title_label.setFont(QFont('Arial', 24, QFont.Bold))
        title_label.setAlignment(Qt.AlignCenter)
        self.layout.addWidget(title_label)

        self.url_input_layout = QHBoxLayout()
        self.url_label = QLabel("Enter URL:")
        self.url_input_layout.addWidget(self.url_label)

        self.url_input = QLineEdit()
        self.url_input_layout.addWidget(self.url_input)

        self.layout.addLayout(self.url_input_layout)

        self.scan_button = QPushButton("Scan URL")
        self.scan_button.setIcon(QIcon('resources/scan.png'))  # Ensure you have a scan icon in resources
        self.scan_button.clicked.connect(self.scan_url)
        self.layout.addWidget(self.scan_button, alignment=Qt.AlignCenter)

        self.result_label = QLabel("")
        self.result_label.setFont(QFont('Arial', 14))
        self.result_label.setAlignment(Qt.AlignCenter)
        self.layout.addWidget(self.result_label)

        self.history_table = QTableWidget()
        self.history_table.setColumnCount(3)
        self.history_table.setHorizontalHeaderLabels(['URL', 'Prediction', 'Timestamp'])
        self.history_table.horizontalHeader().setSectionResizeMode(0, QHeaderView.Stretch)
        self.history_table.horizontalHeader().setSectionResizeMode(1, QHeaderView.ResizeToContents)
        self.history_table.horizontalHeader().setSectionResizeMode(2, QHeaderView.ResizeToContents)
        self.layout.addWidget(self.history_table)

        self.setLayout(self.layout)

    def scan_url(self):
        url = self.url_input.text()
        if 'www.' not in url:
            url = url.replace('https://', 'https://www.')
        if not url:
            QMessageBox.warning(self, "Input Error", "Please enter a URL to scan.")
            return

        result, confidence = predict_url(url)
        if result == "error":
            QMessageBox.critical(self, "Prediction Error", "An error occurred during the prediction process.")
            return

        confidence_text = f" (Confidence: {confidence*100:.2f}%)"
        self.result_label.setText(f"URL: {url}\nPrediction: {result}{confidence_text}")
        self.result_label.setStyleSheet("color: green;" if result == "benign" else "color: red;")

        self.add_to_history(url, result, confidence)

    def add_to_history(self, url, result, confidence):
        from datetime import datetime
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        self.scan_history.append((url, result, confidence, timestamp))
        self.update_history_table()

    def update_history_table(self):
        self.history_table.setRowCount(len(self.scan_history))
        for i, (url, result, confidence, timestamp) in enumerate(self.scan_history):
            self.history_table.setItem(i, 0, QTableWidgetItem(url))
            self.history_table.setItem(i, 1, QTableWidgetItem(f"{result} ({confidence*100:.2f}%)"))
            self.history_table.setItem(i, 2, QTableWidgetItem(timestamp))

if __name__ == "__main__":
    app = QApplication(sys.argv)
    widget = URLScanWidget()
    widget.show()
    sys.exit(app.exec_())
