import sys
import psutil
from PyQt5.QtWidgets import (QWidget, QVBoxLayout, QTableWidget, QTableWidgetItem, QApplication, QPushButton, 
                             QHBoxLayout, QLineEdit, QHeaderView, QMessageBox, QMenu)
from PyQt5.QtCore import QThread, pyqtSignal, Qt
from PyQt5.QtGui import QColor

class ProcessUpdater(QThread):
    update_signal = pyqtSignal(list)

    def run(self):
        while True:
            process_list = []
            for process in psutil.process_iter(['pid', 'name', 'username', 'cpu_percent', 'memory_info', 'status']):
                try:
                    if process.info['pid'] != 0:  # Exclude System Idle Process
                        process_list.append(process.info)
                except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                    continue
            self.update_signal.emit(process_list)
            self.msleep(2000)  # Sleep for 2 seconds

class ProcessViewerWidget(QWidget):
    def __init__(self):
        super().__init__()
        self.init_ui()
        self.search_query = ""  # Initialize search query
        self.start_thread()

    def init_ui(self):
        layout = QVBoxLayout()

        # Search Bar
        search_layout = QHBoxLayout()
        self.search_input = QLineEdit()
        self.search_input.setPlaceholderText("Search by PID, Name, Username, Status...")
        self.search_input.returnPressed.connect(self.search_process)  # Connect Enter key to search
        search_button = QPushButton("Search")
        search_button.clicked.connect(self.search_process)
        search_button.setStyleSheet("""
            QPushButton {
                background-color: #29b6f6;
                color: white;
                border-radius: 5px;
                padding: 5px;
            }
            QPushButton:hover {
                background-color: #0277bd;
            }
        """)
        search_layout.addWidget(self.search_input)
        search_layout.addWidget(search_button)
        layout.addLayout(search_layout)

        # Process Table
        self.table_widget = QTableWidget()
        self.table_widget.setColumnCount(6)
        self.table_widget.setHorizontalHeaderLabels(['PID', 'Name', 'Username', 'CPU %', 'Memory (MB)', 'Status'])
        self.table_widget.horizontalHeader().setStretchLastSection(True)
        self.table_widget.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.table_widget.setStyleSheet("""
            QTableWidget {
                font-size: 12pt;
            }
            QHeaderView::section {
                font-size: 14pt;
            }
        """)
        self.table_widget.setAlternatingRowColors(True)
        self.table_widget.setContextMenuPolicy(Qt.CustomContextMenu)
        self.table_widget.customContextMenuRequested.connect(self.show_context_menu)
        layout.addWidget(self.table_widget)

        # Buttons
        button_layout = QHBoxLayout()
        self.suspend_button = QPushButton("Suspend Process")
        self.suspend_button.clicked.connect(self.suspend_process)
        self.resume_button = QPushButton("Resume Process")
        self.resume_button.clicked.connect(self.resume_process)
        self.terminate_button = QPushButton("Terminate Process")
        self.terminate_button.clicked.connect(self.terminate_process)
        self.suspend_button.setStyleSheet(self.button_style())
        self.resume_button.setStyleSheet(self.button_style())
        self.terminate_button.setStyleSheet(self.button_style())
        button_layout.addWidget(self.suspend_button)
        button_layout.addWidget(self.resume_button)
        button_layout.addWidget(self.terminate_button)
        layout.addLayout(button_layout)

        self.setLayout(layout)

    def start_thread(self):
        self.thread = ProcessUpdater()
        self.thread.update_signal.connect(self.update_processes)
        self.thread.start()

    def update_processes(self, processes):
        self.table_widget.setRowCount(0)
        for proc in processes:
            row_position = self.table_widget.rowCount()
            self.table_widget.insertRow(row_position)
            self.update_process_row(row_position, proc)
        self.apply_search_filter()  # Reapply the search filter after updating processes

    def update_process_row(self, row, proc):
        self.table_widget.setItem(row, 0, QTableWidgetItem(str(proc.get('pid', ''))))
        self.table_widget.setItem(row, 1, QTableWidgetItem(proc.get('name', 'N/A')))
        self.table_widget.setItem(row, 2, QTableWidgetItem(proc.get('username', 'N/A')))
        self.table_widget.setItem(row, 3, self.create_colored_item(f"{proc.get('cpu_percent', 0):.2f}", proc.get('cpu_percent', 0)))
        self.table_widget.setItem(row, 4, QTableWidgetItem(f"{proc['memory_info'].rss / (1024 ** 2):.2f}"))  # Memory in MB
        self.table_widget.setItem(row, 5, QTableWidgetItem(proc.get('status', 'N/A')))

    def create_colored_item(self, text, value):
        item = QTableWidgetItem(text)
        if value > 80:
            item.setBackground(QColor('red'))
            # item.setForeground(QColor('white'))
        elif value > 50:
            item.setBackground(QColor('orange'))
            # item.setForeground(QColor('white'))
        # else:
            # item.setBackground(QColor('white'))  # No coloring for low usage
            # item.setForeground(QColor('black'))
            # item.setForeground(QColor('white'))
        return item

    def button_style(self):
        return """
            QPushButton {
                background-color: #29b6f6;
                color: white;
                border-radius: 5px;
                padding: 10px;
                margin: 5px;
                font-size: 12pt;
                font-family: Arial;
            }
            QPushButton:hover {
                background-color: #0277bd;
            }
        """

    def search_process(self):
        self.search_query = self.search_input.text().strip().lower()  # Save the search query
        self.apply_search_filter()

    def apply_search_filter(self):
        for row in range(self.table_widget.rowCount()):
            self.table_widget.setRowHidden(row, False)
            for column in range(self.table_widget.columnCount()):
                item = self.table_widget.item(row, column)
                if self.search_query in item.text().lower():
                    break
            else:
                self.table_widget.setRowHidden(row, True)

    def get_selected_pid(self):
        selected_row = self.table_widget.currentRow()
        if selected_row == -1:
            QMessageBox.warning(self, 'No Selection', 'Please select a process from the list.')
            return None
        pid = self.table_widget.item(selected_row, 0).text()
        return int(pid)

    def suspend_process(self):
        pid = self.get_selected_pid()
        if pid is not None:
            try:
                p = psutil.Process(pid)
                p.suspend()
                QMessageBox.information(self, 'Process Suspended', f'Process {pid} has been suspended.')
            except Exception as e:
                QMessageBox.critical(self, 'Error', str(e))

    def resume_process(self):
        pid = self.get_selected_pid()
        if pid is not None:
            try:
                p = psutil.Process(pid)
                p.resume()
                QMessageBox.information(self, 'Process Resumed', f'Process {pid} has been resumed.')
            except Exception as e:
                QMessageBox.critical(self, 'Error', str(e))

    def terminate_process(self):
        pid = self.get_selected_pid()
        if pid is not None:
            try:
                p = psutil.Process(pid)
                p.terminate()
                QMessageBox.information(self, 'Process Terminated', f'Process {pid} has been terminated.')
            except Exception as e:
                QMessageBox.critical(self, 'Error', str(e))

    def show_context_menu(self, pos):
        menu = QMenu(self)
        suspend_action = menu.addAction("Suspend Process")
        resume_action = menu.addAction("Resume Process")
        terminate_action = menu.addAction("Terminate Process")

        action = menu.exec_(self.table_widget.viewport().mapToGlobal(pos))
        if action == suspend_action:
            self.suspend_process()
        elif action == resume_action:
            self.resume_process()
        elif action == terminate_action:
            self.terminate_process()

if __name__ == "__main__":
    app = QApplication(sys.argv)
    viewer = ProcessViewerWidget()
    viewer.show()
    sys.exit(app.exec_())
