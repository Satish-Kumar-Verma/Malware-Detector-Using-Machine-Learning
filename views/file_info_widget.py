import sys
import logging
from PyQt5.QtWidgets import QWidget, QVBoxLayout, QPushButton, QFileDialog, QTableWidget, QTableWidgetItem, QApplication, QLabel, QProgressBar, QHeaderView
from PyQt5.QtCore import QThread, pyqtSignal, Qt
from file_info import get_file_info
from PyQt5.QtGui import QFont

# Suppress specific warnings from hachoir
logging.getLogger('hachoir').setLevel(logging.ERROR)

class FileInfoThread(QThread):
    progress_signal = pyqtSignal(int, str)
    result_signal = pyqtSignal(dict)

    def __init__(self, file_path):
        super().__init__()
        self.file_path = file_path

    def run(self):
        try:
            self.progress_signal.emit(10, "Calculating hashes...")
            file_info = get_file_info(self.file_path)
            self.result_signal.emit(file_info)
        except Exception as e:
            self.result_signal.emit({"error": str(e)})

class FileInfoWidget(QWidget):
    def __init__(self):
        super().__init__()
        self.init_ui()

    def init_ui(self):
        layout = QVBoxLayout()

        title_label = QLabel("File Info")
        title_label.setFont(QFont('Arial', 82))
        title_label.setStyleSheet("color: #29b6f6; margin-bottom: 20px;")
        layout.addWidget(title_label, alignment=Qt.AlignCenter)

        self.load_button = QPushButton("Load File")
        self.load_button.clicked.connect(self.load_file)
        self.load_button.setFont(QFont('Arial', 14))
        self.load_button.setStyleSheet("""
            QPushButton {
                color: white;                
            }
        """)
        layout.addWidget(self.load_button, alignment=Qt.AlignCenter)

        self.progress_bar = QProgressBar()
        self.progress_bar.setValue(0)
        self.progress_bar.setVisible(False)
        layout.addWidget(self.progress_bar)

        self.progress_label = QLabel("")
        layout.addWidget(self.progress_label)

        self.table_widget = QTableWidget()
        self.table_widget.setColumnCount(2)
        self.table_widget.setHorizontalHeaderLabels(['Field', 'Value'])
        self.table_widget.horizontalHeader().setSectionResizeMode(0, QHeaderView.ResizeToContents)
        self.table_widget.horizontalHeader().setSectionResizeMode(1, QHeaderView.Stretch)
        self.table_widget.horizontalHeader().setStretchLastSection(True)
        self.table_widget.setStyleSheet("""
            QTableWidget {
                font-size: 12pt;
            } 
            QHeaderView::section {
                font-size: 14pt;
            }
        """)
        self.table_widget.setAlternatingRowColors(True)
        layout.addWidget(self.table_widget)

        self.setLayout(layout)

    def load_file(self):
        file_dialog = QFileDialog.getOpenFileName(self, 'Open File', '', 'All Files (*)')
        if file_dialog[0]:
            self.file_path = file_dialog[0]
            self.file_info_thread = FileInfoThread(self.file_path)
            self.file_info_thread.progress_signal.connect(self.update_progress)
            self.file_info_thread.result_signal.connect(self.display_file_info)
            self.progress_bar.setVisible(True)  # Show progress bar when loading starts
            self.file_info_thread.start()

    def update_progress(self, value, message):
        self.progress_bar.setValue(value)
        self.progress_label.setText(message)

    def display_file_info(self, file_info):
        self.table_widget.clear()
        self.table_widget.setRowCount(0)
        self.table_widget.setColumnCount(2)
        self.table_widget.setHorizontalHeaderLabels(['Field', 'Value'])
        self.table_widget.horizontalHeader().setSectionResizeMode(0, QHeaderView.ResizeToContents)
        self.table_widget.horizontalHeader().setSectionResizeMode(1, QHeaderView.Stretch)
        self.table_widget.horizontalHeader().setStretchLastSection(True)
        self.table_widget.setAlternatingRowColors(True)

        if "error" in file_info:
            self.progress_label.setText(file_info["error"])
            return

        def add_row(field, value):
            row_position = self.table_widget.rowCount()
            self.table_widget.insertRow(row_position)
            self.table_widget.setItem(row_position, 0, QTableWidgetItem(field))
            self.table_widget.setItem(row_position, 1, QTableWidgetItem(value))

        def add_header(title):
            row_position = self.table_widget.rowCount()
            self.table_widget.insertRow(row_position)
            item = QTableWidgetItem(title)
            item.setTextAlignment(Qt.AlignCenter)
            item.setFont(QFont('Arial', 14, QFont.Bold))
            self.table_widget.setSpan(row_position, 0, 1, 2)
            self.table_widget.setItem(row_position, 0, item)

        # Add Hashes
        add_header("Hashes")
        for algo, hash_value in file_info["hashes"].items():
            add_row(algo.upper(), hash_value)

        # Add Metadata
        add_header("Metadata")
        for key, value in file_info["metadata"].items():
            add_row(key, str(value))

        self.progress_bar.setValue(100)
        self.progress_label.setText("File information loaded successfully.")
        self.progress_bar.setVisible(False)  # Hide progress bar after loading completes

if __name__ == "__main__":
    app = QApplication(sys.argv)
    viewer = FileInfoWidget()
    viewer.show()
    sys.exit(app.exec_())
