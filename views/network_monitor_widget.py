import sys
import psutil
from PyQt5.QtWidgets import QWidget, QVBoxLayout, QTableWidget, QTableWidgetItem, QApplication, QHeaderView
from PyQt5.QtCore import QThread, pyqtSignal

class NetworkUpdater(QThread):
    update_signal = pyqtSignal(list)

    def run(self):
        while True:
            network_data = []
            net_io = psutil.net_io_counters(pernic=True)
            for interface, stats in net_io.items():
                network_data.append({
                    'interface': interface,
                    'bytes_sent': stats.bytes_sent,
                    'bytes_recv': stats.bytes_recv,
                    'packets_sent': stats.packets_sent,
                    'packets_recv': stats.packets_recv
                })
            self.update_signal.emit(network_data)
            self.msleep(2000)  # Sleep for 2 seconds

class NetworkMonitorWidget(QWidget):
    def __init__(self):
        super().__init__()
        self.init_ui()
        self.start_thread()

    def init_ui(self):
        layout = QVBoxLayout()

        # Network Table
        self.table_widget = QTableWidget()
        self.table_widget.setColumnCount(5)
        self.table_widget.setHorizontalHeaderLabels(['Interface', 'Bytes Sent', 'Bytes Received', 'Packets Sent', 'Packets Received'])
        self.table_widget.horizontalHeader().setStretchLastSection(True)
        self.table_widget.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.table_widget.setStyleSheet("""
            QTableWidget {
                font-size: 12pt;
            }
            QHeaderView::section {
                font-size: 14pt;
            }
        """)
        self.table_widget.setAlternatingRowColors(True)
        layout.addWidget(self.table_widget)

        self.setLayout(layout)

    def start_thread(self):
        self.thread = NetworkUpdater()
        self.thread.update_signal.connect(self.update_network_data)
        self.thread.start()

    def update_network_data(self, network_data):
        self.table_widget.setRowCount(0)
        for data in network_data:
            row_position = self.table_widget.rowCount()
            self.table_widget.insertRow(row_position)
            self.table_widget.setItem(row_position, 0, QTableWidgetItem(data['interface']))
            self.table_widget.setItem(row_position, 1, QTableWidgetItem(self.format_bytes(data['bytes_sent'])))
            self.table_widget.setItem(row_position, 2, QTableWidgetItem(self.format_bytes(data['bytes_recv'])))
            self.table_widget.setItem(row_position, 3, QTableWidgetItem(str(data['packets_sent'])))
            self.table_widget.setItem(row_position, 4, QTableWidgetItem(str(data['packets_recv'])))

    def format_bytes(self, bytes):
        for unit in ['', 'K', 'M', 'G', 'T', 'P']:
            if bytes < 1024.0:
                return f"{bytes:.2f} {unit}B"
            bytes /= 1024.0

if __name__ == "__main__":
    app = QApplication(sys.argv)
    network_monitor = NetworkMonitorWidget()
    network_monitor.show()
    sys.exit(app.exec_())
