import sys
import os
import random
from PyQt5.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QPushButton, QFileDialog, QProgressBar,
                             QMessageBox, QApplication, QLabel, QSplitter, QTableWidget, QTableWidgetItem,
                             QHeaderView, QFrame, QStackedWidget, QSizePolicy)
from PyQt5.QtCore import QTimer, QSize, Qt
from PyQt5.QtGui import QIcon, QFont, QColor, QPalette
from plyer import notification
from settings import SettingsWidget


class DashboardWidget(QWidget):
    def __init__(self, main_window=None):
        super().__init__()  # Removed 'parent' parameter
        self.main_window = main_window
        self.init_ui()


    def init_ui(self):
        # Set window properties
        self.setWindowTitle("Malware Detector v1.0")
        self.resize(1200, 800)

        # Main layout
        main_layout = QHBoxLayout(self)
        main_layout.setContentsMargins(0, 0, 0, 0)

        # Left Sidebar Navigation
        sidebar = QFrame()
        sidebar.setFixedWidth(250)
        sidebar_layout = QVBoxLayout(sidebar)
        sidebar_layout.setContentsMargins(0, 0, 0, 0)
        sidebar_layout.setSpacing(0)
        sidebar.setStyleSheet("""
            QFrame {
                background-color: #2c3e50;
            }
        """)

        # Logo
        logo_label = QLabel("Malware Detector")
        logo_label.setFont(QFont('Arial', 20, QFont.Bold))
        logo_label.setAlignment(Qt.AlignCenter)
        logo_label.setStyleSheet("color: white; padding: 20px;")
        sidebar_layout.addWidget(logo_label)

        # Navigation Buttons
        nav_buttons = QVBoxLayout()
        nav_buttons.setContentsMargins(0, 0, 0, 0)
        nav_buttons.setSpacing(0)

        self.dashboard_button = self.create_nav_button("Dashboard", "resources/dashboard_icon.png")
        self.quick_scan_button = self.create_nav_button("Quick Scan", "resources/quick_scan_icon.png")
        self.full_scan_button = self.create_nav_button("Full Scan", "resources/full_scan_icon.png")
        self.custom_scan_button = self.create_nav_button("Custom Scan", "resources/custom_scan_icon.png")
        self.url_scan_button = self.create_nav_button("URL Scan", "resources/url_scan_icon.png")
        self.quarantine_button = self.create_nav_button("Quarantine", "resources/quarantine_icon.png")
        self.settings_button = self.create_nav_button("Settings", "resources/settings_icon.png")
        self.help_button = self.create_nav_button("Help & Support", "resources/help_icon.png")

        nav_buttons.addWidget(self.dashboard_button)
        nav_buttons.addWidget(self.quick_scan_button)
        nav_buttons.addWidget(self.full_scan_button)
        nav_buttons.addWidget(self.custom_scan_button)
        nav_buttons.addWidget(self.url_scan_button)
        nav_buttons.addWidget(self.quarantine_button)
        nav_buttons.addStretch()
        nav_buttons.addWidget(self.settings_button)
        nav_buttons.addWidget(self.help_button)

        sidebar_layout.addLayout(nav_buttons)

        # Main Content Area
        self.stacked_widget = QStackedWidget()
        self.stacked_widget.addWidget(self.create_dashboard_page())
        # You can add more pages here for different functionalities

        # Connect navigation buttons to pages
        self.dashboard_button.clicked.connect(lambda: self.stacked_widget.setCurrentIndex(0))
        
        self.settings_button.clicked.connect(self.open_settings)

        self.custom_scan_button.clicked.connect(self.open_custom_scan)

        self.url_scan_button.clicked.connect(self.open_url_scan)


        # Add sidebar and main content to main layout
        main_layout.addWidget(sidebar)
        main_layout.addWidget(self.stacked_widget)

        self.setLayout(main_layout)

    def create_nav_button(self, text, icon_path):
        button = QPushButton(text)
        button.setFont(QFont('Arial', 14))
        button.setIcon(QIcon(resource_path(icon_path)))
        button.setIconSize(QSize(24, 24))
        button.setStyleSheet("""
            QPushButton {
                color: white;
                background-color: #34495e;
                border: none;
                padding: 15px;
                text-align: left;
            }
            QPushButton:hover {
                background-color: #4b6584;
            }
            QPushButton:pressed {
                background-color: #2d98da;
            }
        """)
        button.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
        return button

    def create_dashboard_page(self):
        page = QWidget()
        layout = QVBoxLayout(page)
        layout.setContentsMargins(20, 20, 20, 20)
        layout.setSpacing(20)

        # Welcome Label
        welcome_label = QLabel("Welcome to Malware Detector")
        welcome_label.setFont(QFont('Arial', 24, QFont.Bold))
        layout.addWidget(welcome_label)

        # Status Cards Layout
        status_layout = QHBoxLayout()
        status_layout.setSpacing(20)

        # System Status Card
        system_status_card = self.create_status_card(
            "System Status",
            "Protected",
            "resources/protected_icon.png",
            "#27ae60"
        )
        status_layout.addWidget(system_status_card)

        # Threats Detected Card
        threats_detected_card = self.create_status_card(
            "Threats Detected",
            "0",
            "resources/threat_icon.png",
            "#c0392b"
        )
        status_layout.addWidget(threats_detected_card)

        # Last Scan Card
        last_scan_card = self.create_status_card(
            "Last Scan",
            "N/A",
            "resources/scan_icon.png",
            "#2980b9"
        )
        status_layout.addWidget(last_scan_card)

        layout.addLayout(status_layout)

        # Recent Activity Label
        recent_activity_label = QLabel("Recent Activity")
        recent_activity_label.setFont(QFont('Arial', 18, QFont.Bold))
        layout.addWidget(recent_activity_label)

        # Recent Activity Table
        self.scan_history_table = QTableWidget(0, 4)
        self.scan_history_table.setHorizontalHeaderLabels(['Date', 'Scan Type', 'Results', 'Action'])
        self.scan_history_table.horizontalHeader().setStretchLastSection(True)
        self.scan_history_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.scan_history_table.verticalHeader().setVisible(False)
        layout.addWidget(self.scan_history_table)

        return page

    def create_status_card(self, title, value, icon_path, color):
        card = QFrame()
        card.setStyleSheet(f"""
            QFrame {{
                background-color: {color};
                border-radius: 10px;
            }}
        """)
        card_layout = QVBoxLayout(card)
        card_layout.setContentsMargins(20, 20, 20, 20)

        icon_label = QLabel()
        icon_label.setPixmap(QIcon(resource_path(icon_path)).pixmap(48, 48))
        icon_label.setAlignment(Qt.AlignCenter)

        title_label = QLabel(title)
        title_label.setFont(QFont('Arial', 16))
        title_label.setStyleSheet("color: white;")
        title_label.setAlignment(Qt.AlignCenter)

        value_label = QLabel(value)
        value_label.setFont(QFont('Arial', 24, QFont.Bold))
        value_label.setStyleSheet("color: white;")
        value_label.setAlignment(Qt.AlignCenter)

        card_layout.addWidget(icon_label)
        card_layout.addWidget(title_label)
        card_layout.addWidget(value_label)

        return card

    def scan_file(self):
        file_dialog = QFileDialog.getOpenFileName(self, 'Select File to Scan', '', 'Executable Files (*.exe)')
        if file_dialog[0]:
            self.scan_file_card.setDisabled(True)
            self.progress_bar.setValue(0)
            self.timer = QTimer()
            self.timer.timeout.connect(self.update_progress)
            self.timer.start(100)  # Update progress every 100 milliseconds

    def update_progress(self):
        value = self.progress_bar.value()
        if value < 100:
            value += random.randint(1, 5)
            self.progress_bar.setValue(min(value, 100))
        else:
            self.timer.stop()
            self.scan_file_card.setDisabled(False)
            self.show_notification()

    def show_notification(self):
        notification.notify(
            title='Scan Complete',
            message='The file scan is complete.',
            app_name='Malware Detector',
            timeout=10
        )
        QMessageBox.information(self, 'Scan Complete', 'The file scan is complete.')


    def open_custom_scan(self):
        if self.main_window:
            self.main_window.custom_scan()
        else:
            print("Main window reference is missing.")

    

    def open_url_scan(self):
        if self.main_window:
            self.main_window.show_url_scan()
        else:
            print("Main window reference is missing.")


    def quick_scan(self):
        QMessageBox.information(self, 'Quick Scan', 'Performing quick scan...')
        # Implement quick scan functionality

    def full_scan(self):
        QMessageBox.information(self, 'Full Scan', 'Performing full scan...')
        # Implement full scan functionality

    def scheduled_scan(self):
        QMessageBox.information(self, 'Scheduled Scan', 'Scheduled scan...')
        # Implement scheduled scan functionality

    def toggle_real_time_protection(self):
        # Toggle real-time protection functionality
        pass

    def open_settings(self):
        if self.main_window:
            self.main_window.show_settings()
        else:
            print("Main window reference is missing.")



    def help_support(self):
        QMessageBox.information(self, 'Help and Support', 'Opening help and support...')
        # Implement help and support functionality

def resource_path(relative_path):
    """ Get the absolute path to the resource, works for dev and for PyInstaller """
    try:
        base_path = sys._MEIPASS
    except Exception:
        base_path = os.path.abspath(".")

    return os.path.join(base_path, relative_path)

if __name__ == "__main__":
    app = QApplication(sys.argv)
    dashboard = DashboardWidget()
    dashboard.show()
    sys.exit(app.exec_())
