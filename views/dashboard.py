import sys
import os
import random
from datetime import datetime
from PyQt5.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QPushButton, QFileDialog, QProgressBar,
    QMessageBox, QLabel, QTableWidget, QTableWidgetItem, QHeaderView, QFrame,
    QStackedWidget, QSizePolicy, QApplication
)
from PyQt5.QtCore import QTimer, QSize, Qt
from PyQt5.QtGui import QIcon, QFont
from plyer import notification
from settings import SettingsWidget

class DashboardWidget(QWidget):
    def __init__(self, main_window=None):
        super().__init__()
        self.main_window = main_window
        self.total_threats_detected = 0
        self.last_scan_date = "N/A"
        self.init_ui()

    def init_ui(self):
        # Main layout
        main_layout = QHBoxLayout(self)
        main_layout.setContentsMargins(0, 0, 0, 0)

        # Left Sidebar Navigation
        sidebar = QFrame()
        sidebar.setFixedWidth(250)
        sidebar_layout = QVBoxLayout(sidebar)
        sidebar_layout.setContentsMargins(0, 0, 0, 0)
        sidebar_layout.setSpacing(0)
        sidebar.setStyleSheet("""
            QFrame {
                background-color: #2c3e50;
            }
        """)

        # Logo
        logo_label = QLabel("Malware Detector")
        logo_label.setFont(QFont('Arial', 20, QFont.Bold))
        logo_label.setAlignment(Qt.AlignCenter)
        logo_label.setStyleSheet("color: white; padding: 20px;")
        sidebar_layout.addWidget(logo_label)

        # Navigation Buttons
        nav_buttons = QVBoxLayout()
        nav_buttons.setContentsMargins(0, 0, 0, 0)
        nav_buttons.setSpacing(0)

        self.dashboard_button = self.create_nav_button("Dashboard", "resources/dashboard_icon.png")
        self.quick_scan_button = self.create_nav_button("Quick Scan", "resources/quick_scan_icon.png")
        self.full_scan_button = self.create_nav_button("Full Scan", "resources/full_scan_icon.png")
        self.custom_scan_button = self.create_nav_button("Custom Scan", "resources/custom_scan_icon.png")
        self.url_scan_button = self.create_nav_button("URL Scan", "resources/url_scan_icon.png")
        self.quarantine_button = self.create_nav_button("Quarantine", "resources/quarantine_icon.png")
        self.settings_button = self.create_nav_button("Settings", "resources/settings_icon.png")
        self.help_button = self.create_nav_button("Help & Support", "resources/help_icon.png")

        nav_buttons.addWidget(self.dashboard_button)
        nav_buttons.addWidget(self.quick_scan_button)
        nav_buttons.addWidget(self.full_scan_button)
        nav_buttons.addWidget(self.custom_scan_button)
        nav_buttons.addWidget(self.url_scan_button)
        nav_buttons.addWidget(self.quarantine_button)
        nav_buttons.addStretch()
        nav_buttons.addWidget(self.settings_button)
        nav_buttons.addWidget(self.help_button)

        sidebar_layout.addLayout(nav_buttons)

        # Main Content Area
        self.stacked_widget = QStackedWidget()
        self.stacked_widget.addWidget(self.create_dashboard_page())
        # You can add more pages here for different functionalities

        # Connect navigation buttons to pages
        self.dashboard_button.clicked.connect(lambda: self.main_window.stacked_widget.setCurrentWidget(self))
        self.custom_scan_button.clicked.connect(self.main_window.custom_scan)
        self.settings_button.clicked.connect(self.main_window.show_settings)

        # Add sidebar and main content to main layout
        main_layout.addWidget(sidebar)
        main_layout.addWidget(self.stacked_widget)

        self.setLayout(main_layout)

    def create_nav_button(self, text, icon_path):
        button = QPushButton(text)
        button.setFont(QFont('Arial', 14))
        button.setIcon(QIcon(resource_path(icon_path)))
        button.setIconSize(QSize(24, 24))
        button.setStyleSheet("""
            QPushButton {
                color: white;
                background-color: #34495e;
                border: none;
                padding: 15px;
                text-align: left;
            }
            QPushButton:hover {
                background-color: #4b6584;
            }
            QPushButton:pressed {
                background-color: #2d98da;
            }
        """)
        button.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
        return button

    def create_dashboard_page(self):
        page = QWidget()
        layout = QVBoxLayout(page)
        layout.setContentsMargins(20, 20, 20, 20)
        layout.setSpacing(20)

        # Welcome Label
        welcome_label = QLabel("Welcome to Malware Detector")
        welcome_label.setFont(QFont('Arial', 24, QFont.Bold))
        layout.addWidget(welcome_label)

        # Status Cards Layout
        status_layout = QHBoxLayout()
        status_layout.setSpacing(20)

        # System Status Card
        self.system_status_card, self.system_status_value_label = self.create_status_card(
            "System Status",
            "Protected",
            "resources/protected_icon.png",
            "#27ae60"
        )
        status_layout.addWidget(self.system_status_card)

        # Threats Detected Card
        self.threats_detected_card, self.threats_detected_value_label = self.create_status_card(
            "Threats Detected",
            "0",
            "resources/threat_icon.png",
            "#c0392b"
        )
        status_layout.addWidget(self.threats_detected_card)

        # Last Scan Card
        self.last_scan_card, self.last_scan_value_label = self.create_status_card(
            "Last Scan",
            "N/A",
            "resources/scan_icon.png",
            "#2980b9"
        )
        status_layout.addWidget(self.last_scan_card)

        layout.addLayout(status_layout)

        # Recent Activity Label
        recent_activity_label = QLabel("Recent Activity")
        recent_activity_label.setFont(QFont('Arial', 18, QFont.Bold))
        layout.addWidget(recent_activity_label)

        # Recent Activity Table
        self.scan_history_table = QTableWidget(0, 4)
        self.scan_history_table.setHorizontalHeaderLabels(['Date', 'Scan Type', 'Threats Found', 'Action'])
        self.scan_history_table.horizontalHeader().setStretchLastSection(True)
        self.scan_history_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.scan_history_table.verticalHeader().setVisible(False)
        layout.addWidget(self.scan_history_table)

        return page

    def create_status_card(self, title, value, icon_path, color):
        card = QFrame()
        card.setStyleSheet(f"""
            QFrame {{
                background-color: {color};
                border-radius: 10px;
            }}
        """)
        card_layout = QVBoxLayout(card)
        card_layout.setContentsMargins(20, 20, 20, 20)

        icon_label = QLabel()
        icon_label.setPixmap(QIcon(resource_path(icon_path)).pixmap(48, 48))
        icon_label.setAlignment(Qt.AlignCenter)

        title_label = QLabel(title)
        title_label.setFont(QFont('Arial', 16))
        title_label.setStyleSheet("color: white;")
        title_label.setAlignment(Qt.AlignCenter)

        value_label = QLabel(value)
        value_label.setFont(QFont('Arial', 24, QFont.Bold))
        value_label.setStyleSheet("color: white;")
        value_label.setAlignment(Qt.AlignCenter)

        card_layout.addWidget(icon_label)
        card_layout.addWidget(title_label)
        card_layout.addWidget(value_label)

        return card, value_label

    def update_from_scan_results(self, results):
        # Update threats detected count
        threats_in_scan = sum(1 for result in results if result['prediction'] == 'malicious')
        self.total_threats_detected += threats_in_scan

        # Update the Threats Detected card
        self.threats_detected_value_label.setText(str(self.total_threats_detected))

        # Update the Last Scan card
        self.last_scan_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        self.last_scan_value_label.setText(self.last_scan_date)

        # Update the System Status
        if threats_in_scan > 0:
            self.system_status_value_label.setText("Threats Found")
            self.system_status_card.setStyleSheet("""
                QFrame {
                    background-color: #c0392b;
                    border-radius: 10px;
                }
            """)
        else:
            self.system_status_value_label.setText("Protected")
            self.system_status_card.setStyleSheet("""
                QFrame {
                    background-color: #27ae60;
                    border-radius: 10px;
                }
            """)

        # Add entry to the Recent Activity table
        self.add_scan_to_history(scan_type="Custom Scan", threats_found=threats_in_scan, date=self.last_scan_date)

    def add_scan_to_history(self, scan_type, threats_found, date):
        row_position = self.scan_history_table.rowCount()
        self.scan_history_table.insertRow(row_position)
        self.scan_history_table.setItem(row_position, 0, QTableWidgetItem(date))
        self.scan_history_table.setItem(row_position, 1, QTableWidgetItem(scan_type))
        self.scan_history_table.setItem(row_position, 2, QTableWidgetItem(str(threats_found)))
        action_item = QTableWidgetItem("View Details")
        action_item.setForeground(Qt.blue)
        self.scan_history_table.setItem(row_position, 3, action_item)
        # Optionally, make the "View Details" clickable to show more info

    def open_settings(self):
        if self.main_window:
            self.main_window.show_settings()
        else:
            print("Main window reference is missing.")

def resource_path(relative_path):
    """ Get the absolute path to the resource, works for dev and for PyInstaller """
    try:
        base_path = sys._MEIPASS
    except Exception:
        base_path = os.path.abspath(".")

    return os.path.join(base_path, relative_path)

# Main application entry point
if __name__ == "__main__":
    app = QApplication(sys.argv)
    dashboard = DashboardWidget()
    dashboard.show()
    sys.exit(app.exec_())
