import sys
import os
import random
from PyQt5.QtWidgets import (QWidget, QVBoxLayout, QPushButton, QFileDialog, QProgressBar, QMessageBox, 
                             QApplication, QHBoxLayout, QLabel, QSplitter, QTableWidget, QTableWidgetItem, QHeaderView)
from PyQt5.QtCore import QTimer, QSize, Qt
from PyQt5.QtGui import QIcon, QFont
from plyer import notification
from settings import SettingsWidget

class DashboardWidget(QWidget):
    def __init__(self):
        super().__init__()
        self.init_ui()

    def init_ui(self):
        layout = QVBoxLayout()

        # Main Splitter
        main_splitter = QSplitter(Qt.Horizontal)

        # Left Sidebar
        sidebar = QVBoxLayout()

        # Function to create a styled card button
        def create_card_button(text, icon_path=None):
            button = QPushButton(text)
            button.setFont(QFont('Arial', 16))
            button.setStyleSheet("""
                QPushButton {
                    background-color: rgba(255, 255, 255, 0.2);
                    border: 2px solid #29b6f6;
                    border-radius: 10px;
                    padding: 20px;
                    margin: 10px;
                    text-align: left;
                }
                QPushButton:hover {
                    background-color: rgba(255, 255, 255, 0.4);
                }
            """)
            if icon_path:
                button.setIcon(QIcon(icon_path))
                button.setIconSize(QSize(50, 50))
            button.setFixedHeight(100)
            return button

        # Add buttons to the sidebar
        quick_scan_button = create_card_button("Quick Scan")
        quick_scan_button.clicked.connect(self.quick_scan)
        sidebar.addWidget(quick_scan_button)

        full_scan_button = create_card_button("Full Scan")
        full_scan_button.clicked.connect(self.full_scan)
        sidebar.addWidget(full_scan_button)

        scheduled_scan_button = create_card_button("Scheduled Scan")
        scheduled_scan_button.clicked.connect(self.scheduled_scan)
        sidebar.addWidget(scheduled_scan_button)

        real_time_toggle = create_card_button("Real-Time Protection: ON")
        real_time_toggle.clicked.connect(self.toggle_real_time_protection)
        sidebar.addWidget(real_time_toggle)

        help_support_button = create_card_button("Help and Support")
        help_support_button.clicked.connect(self.help_support)
        sidebar.addWidget(help_support_button)

        sidebar_widget = QWidget()
        sidebar_widget.setLayout(sidebar)
        main_splitter.addWidget(sidebar_widget)

        # Main Content
        main_content = QVBoxLayout()

        # Scan File Card
        plus_icon_path = resource_path('resources/plus.png')
        self.scan_file_card = create_card_button("Click here to scan a custom file", plus_icon_path)
        self.scan_file_card.clicked.connect(self.scan_file)
        main_content.addWidget(self.scan_file_card)

        # Progress Bar
        self.progress_bar = QProgressBar()
        self.progress_bar.setValue(0)
        main_content.addWidget(self.progress_bar)

        # Scan History Table
        scan_history_label = QLabel("Scan History")
        scan_history_label.setFont(QFont('Arial', 14))
        main_content.addWidget(scan_history_label)

        self.scan_history_table = QTableWidget(5, 3)
        self.scan_history_table.setHorizontalHeaderLabels(['Date', 'Type', 'Status'])
        self.scan_history_table.horizontalHeader().setStretchLastSection(True)
        self.scan_history_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        main_content.addWidget(self.scan_history_table)

        # Detected Threats
        detected_threats_label = QLabel("Detected Threats")
        detected_threats_label.setFont(QFont('Arial', 14))
        main_content.addWidget(detected_threats_label)

        self.detected_threats_table = QTableWidget(5, 2)
        self.detected_threats_table.setHorizontalHeaderLabels(['Threat', 'Action'])
        self.detected_threats_table.horizontalHeader().setStretchLastSection(True)
        self.detected_threats_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        main_content.addWidget(self.detected_threats_table)

        main_content_widget = QWidget()
        main_content_widget.setLayout(main_content)
        main_splitter.addWidget(main_content_widget)

        layout.addWidget(main_splitter)
        self.setLayout(layout)

    def scan_file(self):
        file_dialog = QFileDialog.getOpenFileName(self, 'Select File to Scan', '', 'Executable Files (*.exe)')
        if file_dialog[0]:
            self.scan_file_card.setDisabled(True)
            self.progress_bar.setValue(0)
            self.timer = QTimer()
            self.timer.timeout.connect(self.update_progress)
            self.timer.start(100)  # Update progress every 100 milliseconds

    def update_progress(self):
        value = self.progress_bar.value()
        if value < 100:
            value += random.randint(1, 5)
            self.progress_bar.setValue(min(value, 100))
        else:
            self.timer.stop()
            self.scan_file_card.setDisabled(False)
            self.show_notification()

    def show_notification(self):
        notification.notify(
            title='Scan Complete',
            message='The file scan is complete.',
            app_name='Malware Detector',
            timeout=10
        )
        QMessageBox.information(self, 'Scan Complete', 'The file scan is complete.')

    def quick_scan(self):
        QMessageBox.information(self, 'Quick Scan', 'Performing quick scan...')
        # Implement quick scan functionality

    def full_scan(self):
        QMessageBox.information(self, 'Full Scan', 'Performing full scan...')
        # Implement full scan functionality

    def scheduled_scan(self):
        QMessageBox.information(self, 'Scheduled Scan', 'Scheduled scan...')
        # Implement scheduled scan functionality

    def toggle_real_time_protection(self):
        # Toggle real-time protection functionality
        pass

    def open_settings(self):
        self.settings_window = SettingsWidget()
        self.settings_window.show()

    def help_support(self):
        QMessageBox.information(self, 'Help and Support', 'Opening help and support...')
        # Implement help and support functionality

def resource_path(relative_path):
    """ Get the absolute path to the resource, works for dev and for PyInstaller """
    try:
        base_path = sys._MEIPASS
    except Exception:
        base_path = os.path.abspath(".")

    return os.path.join(base_path, relative_path)

if __name__ == "__main__":
    app = QApplication(sys.argv)
    dashboard = DashboardWidget()
    dashboard.show()
    sys.exit(app.exec_())
