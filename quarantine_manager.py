import os
import shutil
import json
import datetime
from cryptography.fernet import Fernet
import subprocess

QUARANTINE_DIR = 'quarantine'
QUARANTINE_DATA_FILE = 'quarantine_data.json'

# Generate a key for encryption
# This should be securely stored and managed
key = Fernet.generate_key()
cipher_suite = Fernet(key)

def encrypt_file(file_path):
    with open(file_path, 'rb') as file:
        file_data = file.read()
    encrypted_data = cipher_suite.encrypt(file_data)
    with open(file_path, 'wb') as file:
        file.write(encrypted_data)

def decrypt_file(file_path):
    with open(file_path, 'rb') as file:
        encrypted_data = file.read()
    decrypted_data = cipher_suite.decrypt(encrypted_data)
    with open(file_path, 'wb') as file:
        file.write(decrypted_data)

def load_quarantine_data():
    if os.path.exists(QUARANTINE_DATA_FILE):
        with open(QUARANTINE_DATA_FILE, 'r') as f:
            return json.load(f)
    return []

def save_quarantine_data(data):
    with open(QUARANTINE_DATA_FILE, 'w') as f:
        json.dump(data, f, indent=4)

def set_windows_permissions(path):
    command = f'''
    $Acl = Get-Acl "{path}"
    $Rule = New-Object System.Security.AccessControl.FileSystemAccessRule("Everyone", "ExecuteFile", "Deny")
    $Acl.SetAccessRule($Rule)
    $Acl | Set-Acl
    '''
    subprocess.run(["powershell", "-Command", command], shell=True)

def quarantine_file(file_path, reason):
    if not os.path.exists(file_path):
        return False
    file_name = os.path.basename(file_path)
    new_path = os.path.join(QUARANTINE_DIR, file_name)
    try:
        shutil.move(file_path, new_path)
        encrypt_file(new_path)
        data = load_quarantine_data()
        data.append({
            'file_name': file_name,
            'original_path': file_path,
            'quarantine_path': new_path,
            'date_quarantined': str(datetime.datetime.now()),
            'reason': reason,
            'notes': ''
        })
        save_quarantine_data(data)
        return True
    except Exception as e:
        print(f"Failed to quarantine file {file_path}: {e}")
        return False

def restore_file(file_name):
    data = load_quarantine_data()
    file_info = next((item for item in data if item['file_name'] == file_name), None)
    if file_info and os.path.exists(file_info['quarantine_path']):
        decrypt_file(file_info['quarantine_path'])
        shutil.move(file_info['quarantine_path'], file_info['original_path'])
        data.remove(file_info)
        save_quarantine_data(data)
        return True
    return False

def delete_file(file_name):
    data = load_quarantine_data()
    file_info = next((item for item in data if item['file_name'] == file_name), None)
    if file_info and os.path.exists(file_info['quarantine_path']):
        os.remove(file_info['quarantine_path'])
        data.remove(file_info)
        save_quarantine_data(data)
        return True
    return False

def add_note_to_file(file_name, note):
    data = load_quarantine_data()
    file_info = next((item for item in data if item['file_name'] == file_name), None)
    if file_info:
        file_info['notes'] = note
        save_quarantine_data(data)
        return True
    return False

if not os.path.exists(QUARANTINE_DIR):
    os.makedirs(QUARANTINE_DIR)
    set_windows_permissions(QUARANTINE_DIR)
