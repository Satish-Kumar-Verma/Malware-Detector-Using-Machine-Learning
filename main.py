import sys
import os
from PyQt5.QtWidgets import QApplication, QMainWindow, QStackedWidget, QAction, QFileDialog, QMessageBox, QWidget, QVBoxLayout, QToolBar
from PyQt5.QtCore import QSize, Qt
from PyQt5.QtGui import QIcon
from views.dashboard import DashboardWidget
from views.process_viewer_widget import ProcessViewerWidget
from views.network_monitor_widget import NetworkMonitorWidget
from views.file_integrity_checker_widget import FileIntegrityCheckerWidget
from views.quarantine_manager_widget import QuarantineManagerWidget
from views.pe_analyzer_widget import PEAnalyzerWidget
from views.file_info_widget import FileInfoWidget
from views.custom_scan_widget import CustomScanWidget
from views.url_scan_widget import URLScanWidget
from views.full_scan_widget import FullScanWidget
from settings import SettingsWidget

def resource_path(relative_path):
    """ Get the absolute path to the resource, works for dev and for PyInstaller """
    try:
        base_path = sys._MEIPASS
    except Exception:
        base_path = os.path.abspath(".")

    return os.path.join(base_path, relative_path)

class MalwareDetector(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle('Malware Detector')
        self.setGeometry(100, 100, 1200, 800)

        self.setWindowIcon(QIcon(resource_path('resources/Threats.png')))  # Set the window and taskbar icon

        self.create_menus()
        self.create_toolbar()
        self.init_ui()

    def create_menus(self):
        menubar = self.menuBar()

        # File menu
        file_menu = menubar.addMenu('File')
        open_action = QAction('Open', self)
        open_action.triggered.connect(self.open_file)
        file_menu.addAction(open_action)
        save_log_action = QAction('Save Log', self)
        save_log_action.triggered.connect(self.save_log)
        file_menu.addAction(save_log_action)
        exit_action = QAction('Exit', self)
        exit_action.triggered.connect(self.close)
        file_menu.addAction(exit_action)

        # Scan menu
        scan_menu = menubar.addMenu('Scan')
        quick_scan_action = QAction('Quick Scan', self)
        quick_scan_action.triggered.connect(self.quick_scan)
        scan_menu.addAction(quick_scan_action)
        full_scan_action = QAction('Full Scan', self)
        # full_scan_action.triggered.connect(self.full_scan)
        scan_menu.addAction(full_scan_action)
        custom_scan_action = QAction('Custom Scan', self)
        custom_scan_action.triggered.connect(self.custom_scan)
        scan_menu.addAction(custom_scan_action)
        scheduled_scan_action = QAction('Scheduled Scan', self)
        scheduled_scan_action.triggered.connect(self.scheduled_scan)
        scan_menu.addAction(scheduled_scan_action)

        # Tools menu
        tools_menu = menubar.addMenu('Tools')
        quarantine_action = QAction('Quarantine Manager', self)
        quarantine_action.triggered.connect(self.show_quarantine_manager)
        tools_menu.addAction(quarantine_action)

        task_manager_action = QAction('Task Manager', self)
        task_manager_action.triggered.connect(self.show_task_manager)
        tools_menu.addAction(task_manager_action)
        network_monitor_action = QAction('Network Monitor', self)
        network_monitor_action.triggered.connect(self.show_network_monitor)
        tools_menu.addAction(network_monitor_action)
        file_integrity_action = QAction('File Integrity Checker', self)
        file_integrity_action.triggered.connect(self.show_file_integrity_checker)
        tools_menu.addAction(file_integrity_action)

        pe_analyzer_action = QAction('PE Analyzer', self)
        pe_analyzer_action.triggered.connect(self.show_pe_analyzer)
        tools_menu.addAction(pe_analyzer_action)


        file_info_action = QAction('Metadata', self)
        file_info_action.triggered.connect(self.show_file_info)
        tools_menu.addAction(file_info_action)

        url_scan_action = QAction('Scan URL', self)
        url_scan_action.triggered.connect(self.show_url_scan)
        tools_menu.addAction(url_scan_action)


        # View menu
        view_menu = menubar.addMenu('View')
        logs_action = QAction('Logs', self)
        logs_action.triggered.connect(self.view_logs)
        view_menu.addAction(logs_action)
        real_time_protection_action = QAction('Real-Time Protection', self, checkable=True)
        real_time_protection_action.triggered.connect(self.toggle_real_time_protection)
        real_time_protection_action.setChecked(True)
        view_menu.addAction(real_time_protection_action)
        notifications_action = QAction('Notifications', self)
        notifications_action.triggered.connect(self.view_notifications)
        view_menu.addAction(notifications_action)

        # Theme menu
        theme_menu = menubar.addMenu('Theme')
        light_theme_action = QAction('Light Theme', self)
        light_theme_action.triggered.connect(lambda: self.change_theme(resource_path('themes/light.qss')))
        theme_menu.addAction(light_theme_action)
        # dark_theme_action = QAction('Dark Theme', self)
        # dark_theme_action.triggered.connect(lambda: self.change_theme(resource_path('themes/dark.qss')))
        # theme_menu.addAction(dark_theme_action)
        cyber_theme_action = QAction('Dark Theme', self)
        cyber_theme_action.triggered.connect(lambda: self.change_theme(resource_path('themes/cyber.qss')))
        theme_menu.addAction(cyber_theme_action)

        # Help menu
        help_menu = menubar.addMenu('Help')
        user_guide_action = QAction('User Guide', self)
        user_guide_action.triggered.connect(self.user_guide)
        help_menu.addAction(user_guide_action)
        about_action = QAction('About', self)
        about_action.triggered.connect(self.about)
        help_menu.addAction(about_action)
        contact_support_action = QAction('Contact Support', self)
        contact_support_action.triggered.connect(self.contact_support)
        help_menu.addAction(contact_support_action)

    def create_toolbar(self):
        toolbar = QToolBar("Main Toolbar")
        toolbar.setIconSize(QSize(32, 32))
        self.addToolBar(Qt.TopToolBarArea, toolbar)

        dashboard_action = QAction('Dashboard', self)
        dashboard_action.triggered.connect(self.show_dashboard)
        toolbar.addAction(dashboard_action)

        start_scan_action = QAction('Start Scan', self)
        start_scan_action.triggered.connect(self.quick_scan)
        toolbar.addAction(start_scan_action)

        pause_scan_action = QAction('Pause Scan', self)
        pause_scan_action.triggered.connect(self.pause_scan)
        toolbar.addAction(pause_scan_action)

        quarantine_action = QAction('Quarantine', self)
        quarantine_action.triggered.connect(self.show_quarantine_manager)
        toolbar.addAction(quarantine_action)

        settings_action = QAction('Settings', self)
        settings_action.triggered.connect(self.show_settings)
        toolbar.addAction(settings_action)

        real_time_protection_action = QAction('Real-Time Protection: ON/OFF', self, checkable=True)
        real_time_protection_action.triggered.connect(self.toggle_real_time_protection)
        real_time_protection_action.setChecked(True)
        toolbar.addAction(real_time_protection_action)

    def init_ui(self):
        self.main_layout = QVBoxLayout()

        self.stacked_widget = QStackedWidget()
        
        # Dashboard
        self.dashboard_widget = DashboardWidget()
        self.stacked_widget.addWidget(self.dashboard_widget)
        
        # Process Viewer Table
        self.process_viewer_widget = ProcessViewerWidget()
        self.stacked_widget.addWidget(self.process_viewer_widget)

        # Network Monitor
        self.network_monitor_widget = NetworkMonitorWidget()
        self.stacked_widget.addWidget(self.network_monitor_widget)
        
        # File Integrity Checker
        self.file_integrity_checker_widget = FileIntegrityCheckerWidget()
        self.stacked_widget.addWidget(self.file_integrity_checker_widget)
        
        # Quarantine Manager
        self.quarantine_manager_widget = QuarantineManagerWidget()
        self.stacked_widget.addWidget(self.quarantine_manager_widget)

        # PE Analyzer
        self.pe_analyzer_widget = PEAnalyzerWidget()
        self.stacked_widget.addWidget(self.pe_analyzer_widget)

        # Exif tool
        self.file_info_widget = FileInfoWidget()
        self.stacked_widget.addWidget(self.file_info_widget)


        # Full scan
        self.full_scan_widget = FullScanWidget()
        self.stacked_widget.addWidget(self.full_scan_widget)


        # Custom scan
        self.custom_scan_widget = CustomScanWidget()
        self.stacked_widget.addWidget(self.custom_scan_widget)


        # Settings
        self.settings_widget = SettingsWidget()
        self.stacked_widget.addWidget(self.settings_widget)

        # URL Scan
        self.url_scan_widget = URLScanWidget()
        self.stacked_widget.addWidget(self.url_scan_widget)

        self.main_layout.addWidget(self.stacked_widget)
        container = QWidget()
        container.setLayout(self.main_layout)
        self.setCentralWidget(container)
        self.change_theme(resource_path('themes/cyber.qss'))

    def update_processes(self):
        self.process_viewer_widget.update_processes()

    def change_theme(self, theme):
        with open(resource_path(theme), 'r') as file:
            self.setStyleSheet(file.read())

    def open_file(self):
        file_dialog = QFileDialog.getOpenFileName(self, 'Open File', '', 'All Files (*)')
        if file_dialog[0]:
            # Perform file scan
            pass

    def save_log(self):
        save_dialog = QFileDialog.getSaveFileName(self, 'Save Log', '', 'Log Files (*.log);;All Files (*)')
        if save_dialog[0]:
            # Save log to file
            pass

    def quick_scan(self):
        QMessageBox.information(self, 'Quick Scan', 'Performing quick scan...')
        # Implement quick scan functionality
        pass

    def full_scan(self):
        self.stacked_widget.setCurrentWidget(self.full_scan_widget)

    def custom_scan(self):
        self.stacked_widget.setCurrentWidget(self.custom_scan_widget)

    def scheduled_scan(self):
        # Implement scheduled scan functionality
        pass

    def show_quarantine_manager(self):
        self.stacked_widget.setCurrentWidget(self.quarantine_manager_widget)

    def show_task_manager(self):
        self.stacked_widget.setCurrentWidget(self.process_viewer_widget)

    def show_dashboard(self):
        self.stacked_widget.setCurrentWidget(self.dashboard_widget)

    def show_network_monitor(self):
        self.stacked_widget.setCurrentWidget(self.network_monitor_widget)
        
    def show_file_integrity_checker(self):
        self.stacked_widget.setCurrentWidget(self.file_integrity_checker_widget)

    def show_pe_analyzer(self):
        self.stacked_widget.setCurrentWidget(self.pe_analyzer_widget)

    def show_file_info(self):
        self.stacked_widget.setCurrentWidget(self.file_info_widget)

    def show_url_scan(self):
        self.stacked_widget.setCurrentWidget(self.url_scan_widget)


    def show_settings(self):
        self.stacked_widget.setCurrentWidget(self.settings_widget)

    def view_logs(self):
        # Implement view logs functionality
        pass

    def toggle_real_time_protection(self, checked):
        # Implement real-time protection toggle functionality
        pass

    def view_notifications(self):
        # Implement view notifications functionality
        pass

    def user_guide(self):
        # Implement user guide functionality
        pass

    def about(self):
        QMessageBox.information(self, 'About', 'Malware Detector v1.0\nDeveloped by Your Name')
        # Implement about functionality
        pass

    def contact_support(self):
        # Implement contact support functionality
        pass

    def pause_scan(self):
        # Implement pause scan functionality
        pass

if __name__ == "__main__":
    app = QApplication(sys.argv)
    app.setWindowIcon(QIcon(resource_path('resources/Threats.png')))  # Ensure the taskbar icon is set
    viewer = MalwareDetector()
    viewer.show()
    sys.exit(app.exec_())
